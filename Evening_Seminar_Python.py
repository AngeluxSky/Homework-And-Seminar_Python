# Задача 1.
# За день машина проезжает n километров. Сколько
# дней нужно, чтобы проехать маршрут длиной m
# километров? При решении этой задачи нельзя
# пользоваться условной инструкцией if и циклами.

# from math import ceil
#
# n = int(input())
# m = int(input())
#
# print(ceil(m/n))


# Задача №3.
# В некоторой школе решили набрать три новых
# математических класса и оборудовать кабинеты для
# них новыми партами. За каждой партой может сидеть
# два учащихся. Известно количество учащихся в
# каждом из трех классов. Выведите наименьшее
# число парт, которое нужно приобрести для них.
# Input: 20 21 22(ввод чисел НЕ в одну строку)

# from math import ceil
#
# class1 = int(input())
# class2 = int(input())
# class3 = int(input())
# print(ceil(class1/2)+ceil(class2/2)+ceil(class3/2))


# Задача №5.
# Вагоны в электричке пронумерованы натуральными
# числами, начиная с 1 (при этом иногда вагоны
# нумеруются от «головы» поезда, а иногда – с
# «хвоста»; это зависит от того, в какую сторону едет
# электричка). В каждом вагоне написан его номер.
# Витя сел в i-й вагон от головы поезда и обнаружил,
# что его вагон имеет номер j. Он хочет определить,
# сколько всего вагонов в электричке. Напишите
# программу, которая будет это делать или сообщать,
# что без дополнительной информации это сделать
# невозможно.
# Input: 3 4(ввод на разных строках)

# i = int(input())
# j = int(input())
#
# if i == j:
#     print('Нельзя без доп. информации')
# else:
#     print(i+j-1)


# Задача №7.
# Дано натуральное число. Требуется определить,
# является ли год с данным номером високосным. Если
# год является високосным, то выведите YES, иначе
# выведите NO. Напомним, что в соответствии с
# григорианским календарем, год является
# високосным, если его номер кратен 4, но не кратен
# 100, а также если он кратен 400.

# year = int(input())
#
# if year % 4 == 0:
#     if year % 400 == 0:
#         print('високосный')
#     elif year % 100 == 0:
#         print('не високосный')
#     else:
#         print('високосный')
# else:
#     print('не високосный')


# Напишите программу, которая считывает три целых числа
# и выводит на экран их сумму. Каждое число записано в отдельной строке.

# a = int(input())
# b = int(input())
# c = int(input())
#
# print(a + b + c)


# Напишите программу,
# которая находит полное число метров по заданному числу сантиметров.

# m = int(input())
# print(m//100)


# По данному целому неотрицательному n вычислите значение n!. N! = 1 * 2 * 3 * … * N
# (произведение всех чисел от 1 до N) 0! = 1 Решить задачу используя цикл while.
# Input:     5
# Output:    120

# n = int(input())
# fact = 1
# inter = 1
# while fact <= n:
#     inter *= fact
#     fact += 1
# print(inter)
# O(n)


# Дано натуральное число A > 1. Определите, каким по счету числом Фибоначчи оно является,
# то есть выведите такое число n, что φ(n)=A. Если А не является числом Фибоначчи,
# выведите число -1.
# Input:   5
# Output:  6

# a = int(input())
#
# n0 = 0
# n1 = 1
# n2 = 0
# i = 2
# while n2 < a:
#     n2 = n0 + n1
#     n0 = n1
#     n1 = n2
#     i += 1
# if n2 > a:
#     i =- 1
# print(i)


# Уставшие от необычно теплой зимы, жители решили узнать, действительно ли это
# самая длинная оттепель за всю историю наблюдений за погодой. Они обратились к синоптикам,
# а те, в свою очередь, занялись исследованиями статистики за прошлые годы. Их интересует,
# сколько дней длилась самая длинная оттепель. Оттепелью они называют период,
# в который среднесуточная температура ежедневно превышала 0 градусов Цельсия.
# Напишите программу, помогающую синоптикам в работе.
# Пользователь вводит число N – общее количество рассматриваемых дней (1 ≤ N ≤ 100).
# В следующих строках располагается N целых чисел.
# Каждое число – среднесуточная температура в соответствующий день.
# Температуры – целые числа и лежат в диапазоне от –50 до 50
# Input:    6 -> -20 30 -40 50 10 -10
# Output: 2

# n = int(input('input n '))
# count = 0
# max1 = 0
# for i in range(n):
#     temp = int(input())
#     if temp > 0:
#         count += 1
#     else:
#         count = 0
#
# print("count = ", max1)


# 15. Иван Васильевич пришел на рынок и решил купить два арбуза:
# один для себя, а другой для тещи. Понятно, что для себя нужно выбрать арбуз потяжелей,
# а для тещи полегче. Но вот незадача: арбузов слишком много и он не знает как же выбрать
# самый легкий и самый тяжелый арбуз? Помогите ему!
# Пользователь вводит одно число N – количество арбузов.
# Вторая строка содержит N чисел, записанных на новой строчке каждое.
# Здесь каждое число – это масса соответствующего арбуза
# Input:	5 -> 5 1 6 5 9
# Output:	1 9

# n = int(input())
# kg = int(input())
# max1 = kg
# min1 = kg
#
# for i in range(n - 1):
#     kg = int(input())
#     if kg < min1:
#         min1 = kg
#     if kg > max1:
#         max1 = kg
# print(min1, max1)

# first_list = [9, 'fkr', True, [1, 2, 3]]

# for i, element in enumerate(first_list):
#     if element == 9:
#         first_list[i] = 'nine'
# print(first_list)

# first_list.remove(9)


# second_list = [41, 5, 1, 89, 4]
# second_list.sort()
# print(second_list)
# print(sorted(second_list))


# Дан список чисел. Определите, сколько в нем
# встречается различных чисел.

# num_list = [1, 6, 4, 5, 9, 1, 1, 80]
# b = list(set(num_list))
# print(len(b))


# Задача №19. Решение в группах
# Дана последовательность из N целых чисел и число
# K. Необходимо сдвинуть всю последовательность
# (сдвиг - циклический) на K элементов вправо, K –
# положительное число.
# Input: [1, 2, 3, 4, 5] k = 3
# Output: [4, 5, 1, 2, 3]
# Примечание: Пользователь может вводить значения
# списка или список задан изначально.

# n = [1, 2, 3, 4, 5]
# k = int(input())
# for i in range(k):
#     t = n[0]
#     for i in range(len(n)-1):
#         n[i] = n[i + 1]
#     n[-1] = t
# print(n)


# Напишите программу для печати всех уникальных
# значений в словаре.
# Input: [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"},
# {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII
# ":" S007 "}]

# Первое решение

# data = [
#     {"V": "S001"},
#     {"V": "S002"},
#     {"VI": "S001"},
#     {"VI": "S005"},
#     {"VII": "S005"},
#     {"V": "S009"},
#     {"VIII": "S007"}
# ]
#
# unique_values = set()
#
# for item in data:
#     for value in item.values():
#         unique_values.add(value.strip())  # Добавляем уникальные значения в множество
#
# print(list(unique_values))


# Второе решение

# one_dict = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": "S005"}, {"V": "S009"}, {"VIII": "S007"}]
# values = set( val for dic in one_dict for val in dic.values())
# print(values)


# Дан массив, состоящий из целых чисел. Напишите
# программу, которая подсчитает количество
# элементов массива, больших предыдущего (элемента
# с предыдущим номером)
# Input: [0, -1, 5, 2, 3]

# f_list = [0, -1, 5, 2, 3]
# count = 0
# for i in range(len(f_list) - 1):
#     if f_list[i] < f_list[i + 1]:
#         count += 1
# print(count)

# a = [int(a) for a in input().split() if int(a) > 0]
# print(a)


# Задача №25. Напишите программу, которая принимает на вход
# строку, и отслеживает, сколько раз каждый символ
# уже встречался. Количество повторов добавляется к
# символам с помощью постфикса формата _n.
# Input: a a a b c a a d c d d

# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2
# Для решения данной задачи используйте функцию
# .split()

# string = 'a a a b a c b b d'.split()
# dictionary = {}
# result = ''
# for i in range(len(string)):
#     if string[i] not in dictionary.keys():
#         dictionary[string[i]] = 1
#         result += f'{string[i]} '
#     else:
#         result += f'{string[i]}_{dictionary[string[i]]} '
#         dictionary[string[i]] += 1
# print(result)


# Задача №27. Решение в группах
# Пользователь вводит текст(строка). Словом считается
# последовательность непробельных символов идущих
# подряд, слова разделены одним или большим числом
# пробелов. Определите, сколько различных слов
# содержится в этом тексте.
# Input: She sells sea shells on the sea shore The shells
# that she sells are sea shells I'm sure.So if she sells sea
# shells on the sea shore I'm sure that the shells are sea
# shore shells
# Output: 13

# text = ''' She sells sea shells on the sea shore The shells
# that she sells are sea shells I'm sure.So if she sells sea
# shells on the sea shore I'm sure that the shells are sea
# shore shells'''
#
# text = text.strip('.?,!\n').replace('.', ' ').lower().split()
# print(text)
# text = list(set(text))
# print(len(text))


# Задача №29
# Ваня и Петя поспорили, кто быстрее решит
# следующую задачу: “Задана последовательность
# неотрицательных целых чисел. Требуется определить
# значение наибольшего элемента
# последовательности, которая завершается первым
# встретившимся нулем (число 0 не входит в
# последовательность)”. Однако 2 друга оказались не
# такими смышлеными. Никто из ребят не смог до
# конца сделать это задание. Они решили так: у кого
# будет меньше ошибок в коде, тот и выиграл спор. За
# помощью товарищи обратились к Вам, студентам.

# n = int(input())
# max_num = n
# while n != 0:
#     n = int(input())
#     if n > max_num:
#         max_num = n
# print(max_num)


# Задача №31. Решение в группах
# Последовательностью Фибоначчи называется
# последовательность чисел a0
# , a1
# , ..., an
# , ..., где
# a0
#  = 0, a1
#  = 1, ak
#  = ak-1 + ak-2 (k > 1).
# Требуется найти N-е число Фибоначчи
# (Задание необходимо решать через рекурсию)

# n = int(input())
# def fibonachi (n):
#     if n in [1, 2]:
#         return 1
#     return fibonachi(n - 1) + fibonachi(n - 2)
# print(fibonachi(n+1))


# Доп. задача. Arr - отсортированная последовательность. k - число. Нужно найти индекс k. Если к нет, то вывести -1

# from random import randint
# a = []
# for i in range(10):
#     a.append(randint(1, 50))
# a.sort()
# print(a)
#
# n = int(input('Ищем: '))
# mid = len(a) // 2
# low = 0
# high = len(a) - 1
# while a[mid] != n and low <= high:
#     if n > a[mid]:
#         low = mid + 1
#     else:
#         high = mid - 1
#     mid = (low + high) // 2
# if low > high:
#     print("-1")
# else:
#     print('А вот где он: ', mid)


# Задача №33. Решение в группах
# Хакер Василий получил доступ к классному журналу и
# хочет заменить все свои минимальные оценки на
# максимальные. Напишите программу, которая
# заменяет оценки Василия, но наоборот: все
# максимальные – на минимальные.
# Input: 5 -> 1 3 3 3 4
# Output: 1 3 3 3 1

# def replace_grades(grades):
#     max_grade = max(grades)
#     min_grade = min(grades)
#     for i in range(len(grades)):
#         if grades[i] == max_grade:
#             grades[i] = min_grade
#         elif grades[i] == min_grade:
#             grades[i] = max_grade
#     return grades
#
# n = int(input("Введите количество оценок: "))
# grades = list(map(int, input("Введите оценки через пробел: ").split()))
# new_grades = replace_grades(grades)
# print("Новые оценки:", " ".join(map(str, new_grades)))

# Другое решение:
# list1 = [1, 3, 3, 3, 4, 2, 5, 3, 1, 5]
# print(list1)
# max_value = max(list1)
# min_value = min(list1)
# i = 0
# while i < len(list1):
#     if list1[i] == max_value:
#         list1[i] = min_value
#     i += 1
# print(list1)


# Задача №35. Решение в группах
# Напишите функцию, которая принимает одно число и
# проверяет, является ли оно простым
# Напоминание: Простое число - это число, которое
# имеет 2 делителя: 1 и n(само число)
# Input: 5
# Output: yes

# def SimpleNum(num):
#     b = True
#     for i in range(2, num):
#         if num % i == 0:
#             b = False
#     return b
#
# print("Enter num")
# n = int(input())
# print(SimpleNum(n))

# Другой вариант:

# import math
#
# def is_prime(n):
#     if n <= 1:
#         return False
#     elif n == 2:
#         return True
#     elif n % 2 == 0:
#         return False
#     else:
#         for i in range(3, int(math.sqrt(n))+1, 2):
#             if n % i == 0:
#                 return False
#         return True
#
# n = int(input("Введите число: "))
# if is_prime(n):
#     print(n, "является простым числом")
# else:
#     print(n, "не является простым числом")


# Задача №37.
# Дано натуральное число N и
# последовательность из N элементов.
# Требуется вывести эту последовательность в
# обратном порядке.
# Примечание. В программе запрещается
# объявлять массивы и использовать циклы
# (даже для ввода и вывода).

# import math
#
#
# n = int(input("Введите число: "))
#
# def prNum(n):
#     for i in range(2, int(math.sqrt(n))):
#         if n % i == 0:
#             return print(f"Число {n} не является простым.")
#     return print(f"Число {n} простое.")
# prNum(n)